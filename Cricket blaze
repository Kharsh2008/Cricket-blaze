import React, { useEffect, useState, useCallback } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { FaTrophy, FaSpinner, FaExclamationCircle } from "react-icons/fa";
import { GiCricketBall } from "react-icons/gi";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";

const CricketBlaze = () => {
  const [matches, setMatches] = useState({ current: [], recent: [], upcoming: [] });
  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState({ matches: true, news: true });
  const [error, setError] = useState({ matches: null, news: null });
  const [animation, setAnimation] = useState(null);
  const [selectedMatch, setSelectedMatch] = useState(null);

  // Fetch matches data
  const fetchMatches = useCallback(async () => {
    try {
      const apiKey = process.env.REACT_APP_CRICAPI_KEY;
      const res = await fetch(`https://api.cricapi.com/v1/matches?apikey=${apiKey}`);
      if (!res.ok) throw new Error("Failed to fetch matches");
      const data = await res.json();
      setMatches({
        current: data.data.filter(match => match.matchType === "live" && match.score?.length > 0),
        recent: data.data.filter(match => match.matchType === "recent" && match.status === "completed"),
        upcoming: data.data.filter(match => new Date(match.dateTimeGMT) > new Date())
      });
      setError(prev => ({ ...prev, matches: null }));
    } catch (err) {
      setError(prev => ({ ...prev, matches: "Failed to load matches. Please try again later." }));
    } finally {
      setLoading(prev => ({ ...prev, matches: false }));
    }
  }, []);

  // Fetch news data
  const fetchNews = useCallback(async () => {
    try {
      const res = await fetch("https://valid-news-api.com/latest-news");
      if (!res.ok) throw new Error("Failed to fetch news");
      const data = await res.json();
      setNews(data.articles.slice(0, 5)); // Limit to 5 latest news
      setError(prev => ({ ...prev, news: null }));
    } catch (err) {
      setError(prev => ({ ...prev, news: "Failed to load news. Please try again later." }));
    } finally {
      setLoading(prev => ({ ...prev, news: false }));
    }
  }, []);

  // Fetch data on mount and set intervals
  useEffect(() => {
    fetchMatches();
    fetchNews();
    const matchInterval = setInterval(fetchMatches, 30000);
    const newsInterval = setInterval(fetchNews, 60000);
    return () => {
      clearInterval(matchInterval);
      clearInterval(newsInterval);
    };
  }, [fetchMatches, fetchNews]);

  // Animation handler
  const handleRunAnimation = useCallback((runs) => {
    if (runs >= 4 && runs < 6) {
      setAnimation("four");
      setTimeout(() => setAnimation(null), 2000);
    } else if (runs >= 6) {
      setAnimation("six");
      setTimeout(() => setAnimation(null), 2500);
    }
  }, []);

  // Render matches section
  const renderMatches = useCallback((title, matchesList) => (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-8"
    >
      <h2 className="text-2xl font-bold mb-4 flex items-center">
        {title}
        <Badge className="ml-2" variant="secondary">{matchesList.length}</Badge>
      </h2>
      {matchesList.length === 0 ? (
        <div className="text-center text-gray-500 py-6">
          No {title.toLowerCase()} found.
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {matchesList.map((match) => (
            <Card 
              key={match.id} 
              className="shadow-xl hover:shadow-2xl transition-shadow duration-300 rounded-2xl overflow-hidden"
            >
              <CardContent className="p-6">
                <div className="flex justify-between items-center mb-3">
                  <h3 className="text-lg font-semibold truncate">{match.name}</h3>
                  <Badge variant={match.status === "live" ? "destructive" : "default"}>
                    {match.status}
                  </Badge>
                </div>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Team</TableHead>
                      <TableHead>Score</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {match.score?.map((team) => (
                      <TableRow key={team.teamId}>
                        <TableCell className="font-medium">{team.teamName}</TableCell>
                        <TableCell>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger>
                                <span className="cursor-help">
                                  {team.runs}/{team.wickets} ({team.overs})
                                </span>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>Runs: {team.runs}</p>
                                <p>Wickets: {team.wickets}</p>
                                <p>Overs: {team.overs}</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="ml-2" 
                            onClick={() => handleRunAnimation(team.runs)}
                          >
                            üéâ
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
                <Button 
                  className="mt-4 w-full" 
                  variant="outline"
                  onClick={() => setSelectedMatch(match)}
                >
                  View Details
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </motion.div>
  ), [handleRunAnimation]);

  // Match details modal
  const MatchDetailsModal = ({ match, onClose }) => (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50"
      onClick={onClose}
    >
      <motion.div
        initial={{ y: -50 }}
        animate={{ y: 0 }}
        className="bg-white p-6 rounded-lg w-11/12 max-w-2xl"
        onClick={(e) => e.stopPropagation()}
      >
        <h2 className="text-2xl font-bold mb-4">{match.name}</h2>
        <p className="text-gray-600 mb-4">{match.status}</p>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Team</TableHead>
              <TableHead>Score</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {match.score?.map((team) => (
              <TableRow key={team.teamId}>
                <TableCell>{team.teamName}</TableCell>
                <TableCell>
                  {team.runs}/{team.wickets} ({team.overs})
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Button className="mt-4 w-full" onClick={onClose}>
          Close
        </Button>
      </motion.div>
    </motion.div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-100 to-gray-200 p-6">
      <h1 className="text-4xl font-extrabold mb-8 text-center text-gray-800">
        Cricket Blaze ‚ö°Ô∏è
      </h1>

      <AnimatePresence>
        {animation && (
          <motion.div 
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.5 }}
            className="fixed top-20 left-1/2 transform -translate-x-1/2 z-50"
          >
            <div className={`p-4 rounded-full shadow-2xl flex items-center space-x-2 ${
              animation === "four" ? "bg-yellow-400" : "bg-green-500"
            }`}>
              <GiCricketBall className="text-4xl animate-bounce" />
              <span className="text-2xl font-bold text-white">
                {animation.toUpperCase()}!
                {animation === "six" && <FaTrophy className="inline ml-2" />}
              </span>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {loading.matches || loading.news ? (
        <div className="flex justify-center items-center h-64">
          <FaSpinner className="animate-spin text-4xl text-blue-500" />
        </div>
      ) : error.matches || error.news ? (
        <div className="text-center text-red-500 p-4 bg-red-100 rounded-lg">
          <FaExclamationCircle className="inline-block mr-2" />
          {error.matches || error.news}
        </div>
      ) : (
        <>
          {renderMatches("Live Matches", matches.current)}
          {renderMatches("Recent Matches", matches.recent)}
          {renderMatches("Upcoming Matches", matches.upcoming)}

          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="mt-12 bg-white p-6 rounded-xl shadow-lg"
          >
            <h2 className="text-2xl font-bold mb-4">Latest Cricket News</h2>
            <div className="space-y-4">
              {news.length === 0 ? (
                <div className="text-center text-gray-500 py-6">
                  No news available.
                </div>
              ) : (
                news.map((article, index) => (
                  <motion.a
                    key={index}
                    href={article.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                    whileHover={{ x: 5 }}
                  >
                    <h3 className="text-lg font-medium text-blue-600">{article.title}</h3>
                    <p className="text-sm text-gray-600">{article.summary}</p>
                  </motion.a>
                ))
              )}
            </div>
          </motion.div>
        </>
      )}

      {selectedMatch && (
        <MatchDetailsModal match={selectedMatch} onClose={() => setSelectedMatch(null)} />
      )}
    </div>
  );
};

export default CricketBlaze;
